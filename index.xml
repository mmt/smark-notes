<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sMark Notes</title>
    <link>https://mmt.github.io/smark-notes/</link>
    <description>Recent content on sMark Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Copyright Mark M. Tobenkin 2020</copyright>
    <lastBuildDate>Sun, 27 Dec 2020 12:54:46 -0800</lastBuildDate><atom:link href="https://mmt.github.io/smark-notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>State Transition Matrices</title>
      <link>https://mmt.github.io/smark-notes/posts/systems/transition_matrices/</link>
      <pubDate>Mon, 28 Dec 2020 23:38:22 -0800</pubDate>
      
      <guid>https://mmt.github.io/smark-notes/posts/systems/transition_matrices/</guid>
      <description>This post will eventually have a few tricks (just one for now) for deriving state transitions matrices in the context of inertial navigation. These matrices arise when studying linear ODEs, for example: $$ \dot x(t) = F(t)x(t) + G(t) u(t), \qquad x(t_0) = x_0 $$ where
 $F: [t_0, t_f] \rightarrow \mathbb{R}^{n\times n}$ is the state matrix, $G: [t_0, t_f] \rightarrow \mathbb{R}^{n \times m}$ is the input matrix, $u: [t_0, t_f] \rightarrow \mathbb{R}^m $ is the input, $x: [t_0, t_f] \rightarrow \mathbb{R}^n$ is the solution of the ODE.</description>
    </item>
    
    <item>
      <title>Interesting Papers</title>
      <link>https://mmt.github.io/smark-notes/posts/papers/interesting_papers/</link>
      <pubDate>Mon, 28 Dec 2020 11:30:31 -0800</pubDate>
      
      <guid>https://mmt.github.io/smark-notes/posts/papers/interesting_papers/</guid>
      <description>Books  Principles of GNSS, Inertial, and Multisensor Integrated Navigation Systems Advanced Kalman Filtering, Least-Squares and Modeling: A Practical Handbook Naive Lie Theory  Inertial Filtering  Quaternion kinematics for error-state Kalman filter IMU Error State Modeling for State Estimation and SensorCalibration: A Tutorial Attitude Error Representations for Kalman Filtering  Visual navigation  Keyframe-Base Visual-Inertial Odometry Using Nonlinear Optimization High-Precision, Consistent EKF-based Visual-Inertial Odometry  Lie Theory In Estimation  A micro Lie theory for state estimation in robotics  </description>
    </item>
    
    <item>
      <title>Useful Properties of Cross Product</title>
      <link>https://mmt.github.io/smark-notes/posts/geometry/cross_product/</link>
      <pubDate>Sun, 27 Dec 2020 12:55:13 -0800</pubDate>
      
      <guid>https://mmt.github.io/smark-notes/posts/geometry/cross_product/</guid>
      <description>This note is going to go important properties of what you might call the cross product matrix. For a vector $u \in \mathbb{R}^3$ we&amp;rsquo;ll write $$[u]_\times = \begin{bmatrix} 0 &amp;amp; -u_z &amp;amp; u_y \\ u_z &amp;amp; 0 &amp;amp; -u_x \\ -u_y &amp;amp; u_x &amp;amp; 0\end{bmatrix}$$ to mean the $3\times 3$ matrix such that $[u]_\times v = u \times v$ for a all $v \in \mathbb{R}^3$.
These matrices are closely related to rotations due through the Rodrigues formula.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://mmt.github.io/smark-notes/about/</link>
      <pubDate>Sun, 27 Dec 2020 12:49:24 -0800</pubDate>
      
      <guid>https://mmt.github.io/smark-notes/about/</guid>
      <description>Welcome! My name is Mark Tobenkin, I&amp;rsquo;m a software engineer specializing in control and estimation systems. This web-page is just a collection of technical content I&amp;rsquo;ve found interesting and would like to hang on to.
A number of the pages are expository writing on math related to motion estimation and navigation. None of the results are new by any stretch of the imagination, but sometimes they have a derivation that suits my personal tastes (e.</description>
    </item>
    
  </channel>
</rss>
